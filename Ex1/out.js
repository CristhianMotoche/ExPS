// Generated by psc-bundle 0.8.2.0
var PS = { };
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      return xs.concat(ys);
    };
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var $plus$plus = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  var $less$greater = function (dictSemigroup) {
      return append(dictSemigroup);
  };
  exports["Show"] = Show;
  exports["Semigroup"] = Semigroup;
  exports["show"] = show;
  exports["++"] = $plus$plus;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var semigroupList = new Prelude.Semigroup(function (v) {
      return function (ys) {
          if (v instanceof Nil) {
              return ys;
          };
          if (v instanceof Cons) {
              return new Cons(v.value0, Prelude["<>"](semigroupList)(v.value1)(ys));
          };
          throw new Error("Failed pattern match at Data.List line 751, column 3 - line 752, column 3: " + [ v.constructor.name, ys.constructor.name ]);
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];     
  var Leaf = (function () {
      function Leaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Leaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Leaf(value0, value1, value2);
              };
          };
      };
      return Leaf;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var treeToList = function (v) {
      if (v instanceof Empty) {
          return Data_List.Nil.value;
      };
      if (v instanceof Leaf && (v.value0 instanceof Empty && v.value2 instanceof Empty)) {
          return new Data_List.Cons(v.value1, Data_List.Nil.value);
      };
      if (v instanceof Leaf) {
          return Prelude["++"](Data_List.semigroupList)(treeToList(v.value0))(Prelude["++"](Data_List.semigroupList)(new Data_List.Cons(v.value1, Data_List.Nil.value))(treeToList(v.value2)));
      };
      throw new Error("Failed pattern match at Tree line 22, column 1 - line 23, column 1: " + [ v.constructor.name ]);
  };
  var treeToArray = function (v) {
      if (v instanceof Empty) {
          return [  ];
      };
      if (v instanceof Leaf && (v.value0 instanceof Empty && v.value2 instanceof Empty)) {
          return [ v.value1 ];
      };
      if (v instanceof Leaf) {
          return Prelude["++"](Prelude.semigroupArray)(treeToArray(v.value0))(Prelude["++"](Prelude.semigroupArray)([ v.value1 ])(treeToArray(v.value2)));
      };
      throw new Error("Failed pattern match at Tree line 27, column 1 - line 28, column 1: " + [ v.constructor.name ]);
  };
  var showTree = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Leaf) {
              return "T: " + (Prelude.show(dictShow)(v.value1) + ("(" + (Prelude.show(showTree(dictShow))(v.value0) + (")" + ("(" + (Prelude.show(showTree(dictShow))(v.value2) + ")"))))));
          };
          if (v instanceof Empty) {
              return "-";
          };
          throw new Error("Failed pattern match at Tree line 32, column 5 - line 34, column 5: " + [ v.constructor.name ]);
      });
  };
  var createIntTree = function (x) {
      return new Leaf(Empty.value, x, Empty.value);
  };
  var countLeaves = function (v) {
      if (v instanceof Empty) {
          return 0;
      };
      if (v instanceof Leaf) {
          return (1 + countLeaves(v.value0) | 0) + countLeaves(v.value2) | 0;
      };
      throw new Error("Failed pattern match at Tree line 18, column 1 - line 19, column 1: " + [ v.constructor.name ]);
  };
  exports["Leaf"] = Leaf;
  exports["Empty"] = Empty;
  exports["treeToArray"] = treeToArray;
  exports["treeToList"] = treeToList;
  exports["countLeaves"] = countLeaves;
  exports["createIntTree"] = createIntTree;
  exports["showTree"] = showTree;;
 
})(PS["Tree"] = PS["Tree"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Tree = PS["Tree"];     
  var main = (function () {
      var tree = new Tree.Leaf(Tree.Empty.value, 2, new Tree.Leaf(Tree.Empty.value, 2, Tree.Empty.value));
      return function __do() {
          Control_Monad_Eff_Console.log("TREE: ")();
          Control_Monad_Eff_Console.log(Prelude.show(Tree.showTree(Prelude.showInt))(tree))();
          Control_Monad_Eff_Console.log("Number of leaves: ")();
          return Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(Tree.countLeaves(tree)))();
      };
  })();
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();