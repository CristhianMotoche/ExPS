(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-bundle 0.8.2.0
var PS = { };
(function(exports) {
  /* global exports, console */
  "use strict";

  // module Control.Monad.Eff.Console

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Prelude"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["log"] = $foreign.log;;
 
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.8.2.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];     
  var Leaf = (function () {
      function Leaf(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Leaf.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Leaf(value0, value1, value2);
              };
          };
      };
      return Leaf;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var showTree = function (dictShow) {
      return new Prelude.Show(function (v) {
          if (v instanceof Leaf) {
              return "T: " + (Prelude.show(dictShow)(v.value1) + ("(" + (Prelude.show(showTree(dictShow))(v.value0) + (")" + ("(" + (Prelude.show(showTree(dictShow))(v.value2) + ")"))))));
          };
          if (v instanceof Empty) {
              return "-";
          };
          throw new Error("Failed pattern match at Main line 14, column 5 - line 16, column 5: " + [ v.constructor.name ]);
      });
  };
  var countLeaves = function (v) {
      if (v instanceof Empty) {
          return 0;
      };
      if (v instanceof Leaf) {
          return (1 + countLeaves(v.value0) | 0) + countLeaves(v.value2) | 0;
      };
      throw new Error("Failed pattern match at Main line 10, column 1 - line 11, column 1: " + [ v.constructor.name ]);
  };
  var main = (function () {
      var tree = new Leaf(Empty.value, 2, new Leaf(Empty.value, 2, Empty.value));
      return function __do() {
          Control_Monad_Eff_Console.log("TREE: ")();
          Control_Monad_Eff_Console.log(Prelude.show(showTree(Prelude.showInt))(tree))();
          Control_Monad_Eff_Console.log("Number of leaves: ")();
          return Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(countLeaves(tree)))();
      };
  })();
  exports["Leaf"] = Leaf;
  exports["Empty"] = Empty;
  exports["main"] = main;
  exports["countLeaves"] = countLeaves;
  exports["showTree"] = showTree;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();

},{}]},{},[1]);
